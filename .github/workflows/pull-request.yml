name: 'Pull Request'

on:
  pull_request:
    branches:
      - master

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.6.0
      - run: git fetch origin ${{ github.base_ref }}

      - name: Use Node.js 16.x
        uses: actions/setup-node@v3.4.1
        with:
          node-version: 16
          cache: yarn

      - name: Install
        run: yarn install --immutable

      - name: List workspaces to lint
        id: lint
        run: echo "::set-output name=matrix::$(yarn jill list --with-script lint --affected origin/${{ github.base_ref }} --json)"

      - name: List workspaces to test
        id: test
        run: echo "::set-output name=matrix::$(yarn jill list --with-script test --affected origin/${{ github.base_ref }} --json)"

    outputs:
      matrix-lint: ${{ steps.lint.outputs.matrix }}
      matrix-test: ${{ steps.test.outputs.matrix }}

  terraform:
    runs-on: ubuntu-latest
    environment: terraform

    permissions:
      pull-requests: write

    steps:
      - uses: actions/checkout@v3.6.0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        working-directory: infra
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        working-directory: infra
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: infra
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: infra
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const {
              data: comments
            } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            });
            
            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{steps.fmt.outcome}}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{steps.init.outcome}}\`
              #### Terraform Validation ü§ñ\`${{steps.validate.outcome}}\`
              #### Terraform Plan üìñ\`${{steps.plan.outcome}}\`
              <details><summary>Show Plan</summary>
              
              \`\`\`terraform
              ${{steps.plan.outputs.stdout}}
              \`\`\`
              
              </details>
              *Pushed by: @${{github.actor}}, Action: \`${{github.event_name}}\`*`;
            
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  build-libs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.6.0

      - name: Use Node.js 16.x
        uses: actions/setup-node@v3.4.1
        with:
          node-version: 16
          cache: yarn

      - name: Install
        run: yarn install --immutable

      - name: Build libraries
        run: yarn run build:libs

      - uses: actions/upload-artifact@v3
        with:
          name: build-libs-artifacts
          path: libs/*/dist/*

  lint:
    runs-on: ubuntu-latest
    needs: [ setup ]
    if: ${{ fromJson(needs.setup.outputs.matrix-lint)[0] }}

    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.matrix-lint) }}

    steps:
      - uses: actions/checkout@v3.6.0

      - name: Use Node.js 16.x
        uses: actions/setup-node@v3.4.1
        with:
          node-version: 16
          cache: yarn

      - name: Install
        run: yarn install --immutable

      - name: Lint
        run: yarn workspace ${{ matrix.name }} lint

  test:
    runs-on: ubuntu-latest
    needs: [ setup, build-libs ]
    if: ${{ fromJson(needs.setup.outputs.matrix-test)[0] }}

    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.matrix-test) }}

    steps:
      - uses: actions/checkout@v3.6.0

      - name: Use Node.js 16.x
        uses: actions/setup-node@v3.4.1
        with:
          node-version: 16
          cache: yarn

      - name: Install
        run: yarn install --immutable

      - uses: actions/download-artifact@v3
        with:
          name: build-libs-artifacts
          path: libs

      - name: Test
        run: yarn workspace ${{ matrix.name }} test

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.slug }}-coverage
          path: ${{ matrix.root }}/coverage

  build-apps:
    runs-on: ubuntu-latest
    needs: [ build-libs ]

    strategy:
      matrix:
        name:
          - '@ants/api'
          - '@ants/frontend'
          - '@ants/viewer'

    steps:
      - uses: actions/checkout@v3.6.0

      - name: Use Node.js 16.x
        uses: actions/setup-node@v3.4.1
        with:
          node-version: 16
          cache: yarn

      - name: Install
        run: yarn install --immutable

      - uses: actions/download-artifact@v3
        with:
          name: build-libs-artifacts
          path: libs

      - name: Build frontend
        run: yarn workspace ${{ matrix.name }} build

  complete:
    runs-on: ubuntu-latest
    needs: [ terraform, lint, test, build-apps ]
    if: ${{ always() }}

    steps:
      - name: Failed
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: exit 1

      - name: Success
        run: echo 'You are soooo curious ;)'
